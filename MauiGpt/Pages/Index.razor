@page "/"
@using Microsoft.JSInterop
@using MauiGpt.Data
@using Markdig
@using Markdown.ColorCode
@using MauiGpt.Dto
@inject IJSRuntime JS
@inject OpenAiService OpenAiService


<div class="container">
    <div class="top">
         <div class="scroll-list" @ref="_scrollList">
            @foreach (var line in _lines)
            {
                switch (line.Type)
                {
                    case ChatMessageType.Answer:
                        <div class="gpt-answer">
                            @((MarkupString)line.Message)
                        </div>
                        break;
                    case ChatMessageType.Question:
                        <div class="gpt-question">
                            @((MarkupString)line.Message)
                        </div>
                        break;
                }
            }
            @if (string.IsNullOrWhiteSpace(_partMessage) == false)
            {
                <div class="gpt-answer">
                    @((MarkupString)@_partMessage)
                </div>
            }
        </div>
    </div>
    <div class="bottom">
        <div class="chat-input-container">
            <input class="chat-input-field" type="text" @bind="_chatQuestion" @onkeyup="QuestionKeyUp">
            <a class="chat-input-send" @onclick="AddText">Send</a>
            <a class="chat-input-clear" @onclick="ClearHistory">Clear</a>
        </div>
    </div>
</div>


@code {
    private string _chatQuestion;

    private readonly IList<ChatMessageDto> _lines = new List<ChatMessageDto>();
    private ElementReference _scrollList;

    private string _partMessage;

    // private readonly MarkdownPipeline _markdownPipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().UseColorCode().Build();

    protected override async Task OnInitializedAsync()
    {
//       var trans = await ColorCodeblock(@"
//for (int i = 0; i < n; i++)
//{
//    if (i == 0)
//    {
//        Console.Write(""{ 0}
//        "", a);
//    }
//    else if (i == 1)
//    {
//        Console.Write(""{0} "", b);
//    }
//    else
//    {
//        c = a + b;
//        a = b;
//        b = c;
//        Console.Write(""{0} "", c);
//    }
//}
//");
//        _partMessage = $"<pre><code>{trans}</code></pre>";
    }

    private async Task QuestionKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddText();
        }
    }


    private void CallbackPartMessage(string part)
    {
        _partMessage = Markdown.ToHtml(part);
        StateHasChanged();
    }

    private void ClearHistory()
    {
        OpenAiService.ClearHistory();
        AddQuestion("History Cleared!");
//        _lines.Add(FormatQuestion("History Cleared!"));
    }

    private void AddQuestion(string question)
    {
        _lines.Add(new ChatMessageDto { Type=ChatMessageType.Question, Message=question});
    }

    private void AddAnswer(string answer)
    {
        var formattedAnswer = Markdown.ToHtml(answer);
        _lines.Add(new ChatMessageDto { Type = ChatMessageType.Answer, Message = formattedAnswer });
    }

    private async Task AddText()
    {
        if (string.IsNullOrEmpty(_chatQuestion))
        {
            AddQuestion("Empty input");
        }
        else
        {
            var question = CleanQuestion(_chatQuestion);
            AddQuestion(question);
            _chatQuestion = "";
            var answer = await OpenAiService.Ask(question, CallbackPartMessage);
            AddAnswer(answer);
        }

        _partMessage = "";
    }

    private async Task<string> ColorCodeblock(string uncolored)
    {
        return await JS.InvokeAsync<string>("colorCodeblock", uncolored);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("colorAllCode");
        await JS.InvokeVoidAsync("scrollToEnd",_scrollList);
    }

    private string CleanQuestion(string input)
    {
        string result = input
            .Replace("<", "[")
            .Replace(">", "]");

        return result;
    }
}