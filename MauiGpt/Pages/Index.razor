@page "/"
@using MauiGpt.Data
@using Markdig
@using MauiGpt.Dto
@using System.Text
@using MauiGpt.Svg

@inject IJSRuntime JsRuntime
@inject OpenAiService OpenAiService
@inject MarkdownToHtml MarkdownToHtml


<div class="container">
    <div class="top">
        <div class="scroll-list" @ref="_scrollList">
            @foreach (var line in _lines)
            {
                var messageClass = MessageClasses[line.Type];

                <div class="@messageClass">
                    @foreach (var block in line.HtmlBlocks)
                    {
                        if (block.Type == BlockType.Code)
                        {
                            Guid guid = Guid.NewGuid();
                            <pre>
                                <code class='hljs'>
                                    <div class="chat-code-heading">
                                        <a onclick="copyToClipboard('@guid')" title="Copy code">
                                            <CopyIcon />
                                        </a>
                                    </div>
                                    <span id="@guid">
                                        @((MarkupString)block.Html)
                                    </span>
                                </code>
                            </pre>
                        }
                        else
                        {
                            @((MarkupString)block.Html)
                        }
                    }
                </div>
            }
        </div>
    </div>
    
    <div class="bottom">
        <div class="chat-input-container">
            <input class="chat-input-field" type="text" @bind="_chatQuestion" @onkeyup="QuestionKeyUp">
            <a @onclick="AddText" title="Send" class="chat-input-icon"><SendIcon /></a>
            <a @onclick="ClearHistory" title="Clear history" class="chat-input-icon"><SkipBackIcon /></a>
            <a @onclick="ClearConversation" title="Clear conversation" class="chat-input-icon"><TrashIcon /></a>
        </div>
    </div>
</div>


@code {
    private string _chatQuestion;

    private IList<ChatMessageDto> _lines = new List<ChatMessageDto>();

    private ElementReference _scrollList;

    private static readonly Dictionary<ChatMessageType, string> MessageClasses = new()
    {
        { ChatMessageType.Question, "gpt-question" },
        { ChatMessageType.Answer, "gpt-answer" },
        { ChatMessageType.Error, "gpt-error" }
    };

    private async Task QuestionKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddText();
        }
    }


    private async Task CallbackPartMessage(string part)
    {
        IList<HtmlBlock> htmlBlocks = await MarkdownToHtml.Convert(part, ConvertCode);
        var temporaryLine = _lines.LastOrDefault();
        if (temporaryLine?.IsTemporary ?? false)
        {
            temporaryLine.HtmlBlocks = htmlBlocks;
        }
        else
        {
            temporaryLine = ChatMessageDto.GetAnswer(htmlBlocks);
            temporaryLine.IsTemporary = true;
            _lines.Add(temporaryLine);
        }

        StateHasChanged();
    }

    private async Task<string> ConvertMarkdownToHtml(string markdown)
    {
        // Returnera htmlblocks gör extra loop i html output
        IList<HtmlBlock> htmlBlocks = await MarkdownToHtml.Convert(markdown, ConvertCode);
        var blocks = MarkdownToHtml.GetBlocks(markdown);

        StringBuilder builder = new StringBuilder();

        foreach (var block in blocks)
        {
            if (block.type == MarkdownToHtml.MdText)
            {
                var html = Markdown.ToHtml(block.content);
                builder.Append(html);
            }
            else
            {
                string colored = await ColorCodeblock(block.content);
                builder.Append($"<pre><code class='hljs'><div>HelloWorld</div>{colored}</pre></code>");
            }
        }

        return builder.ToString();
    }

    private async Task<string> ConvertCode(string language, string codeData)
    {
        return await JsRuntime.InvokeAsync<string>("colorCodeblock", codeData);
    }

    private void ClearHistory()
    {
        OpenAiService.ClearHistory();
        AddQuestion("History Cleared!");
    }

    private void ClearConversation()
    {
        OpenAiService.ClearHistory();
        _lines = new List<ChatMessageDto>();
    }

    private void AddQuestion(string question)
    {
        _lines.Add(ChatMessageDto.GetQuestion(question));
    }

    private async Task AddAnswer(string answer)
    {
        _lines = _lines.Where(item => item.IsTemporary == false).ToList();
        IList<HtmlBlock> htmlBlocks = await MarkdownToHtml.Convert(answer, ConvertCode);
        _lines.Add(ChatMessageDto.GetAnswer(htmlBlocks));
    }

    private void AddError(string error)
    {
        _lines.Add(ChatMessageDto.GetError(error));
    }


    private async Task AddText()
    {
        if (string.IsNullOrEmpty(_chatQuestion))
        {
            AddQuestion("Empty input");
        }
        else
        {
            var question = CleanQuestion(_chatQuestion);
            AddQuestion(question);
            _chatQuestion = "";
            var (status, answer) = await OpenAiService.Ask(question, CallbackPartMessage);

            if (status == AiAnswerType.Error)
            {
                AddError(answer);
            }
            else
            {
                await AddAnswer(answer);
            }
        }
    }

    private async Task<string> ColorCodeblock(string uncolored)
    {
        return await JsRuntime.InvokeAsync<string>("colorCodeblock", uncolored);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("scrollListToEnd", _scrollList);
    }

    private string CleanQuestion(string input)
    {
        string result = input
            .Replace("<", "[")
            .Replace(">", "]");

        return result;
    }
}